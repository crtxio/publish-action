import { MultihashHasher } from './abstract.mjs';
export { MultihashHasher } from './abstract.mjs';
import { GenericHasher } from './generic.mjs';

const identity = GenericHasher.from({
  code: 0,
  name: "identity",
  encoder: (data) => {
    return data;
  }
});

class Hashers {
  constructor(hashers) {
    this.hashers = hashers;
    this.hashers = { identity, ...hashers };
    for (const hasher of Object.values(this.hashers)) {
      this.hashers[hasher.name] = hasher;
      this.hashers[hasher.code] = hasher;
    }
  }
  find(code) {
    if (code instanceof MultihashHasher)
      return code;
    return this.hashers[code];
  }
  async encode(data, code) {
    const hasher = code ? this.find(code) : identity;
    if (!hasher)
      throw Error(`what kind of hash is ${code}?`);
    code = hasher.code;
    const digest = await hasher.encode(data);
    const len = digest.length;
    return { code, len, digest };
  }
}

export { Hashers };
