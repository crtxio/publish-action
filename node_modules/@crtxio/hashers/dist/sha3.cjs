'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const generic = require('./generic.cjs');
const sha3 = require('@noble/hashes/sha3');
require('./abstract.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  const n = Object.create(null);
  if (e) {
    for (const k in e) {
      n[k] = e[k];
    }
  }
  n["default"] = e;
  return n;
}

const sha3__namespace = /*#__PURE__*/_interopNamespace(sha3);

const sha3224 = generic.GenericHasher.from({
  code: 23,
  name: "sha3-224",
  encoder: sha3__namespace.sha3_224
});
const sha3256 = generic.GenericHasher.from({
  code: 22,
  name: "sha3-256",
  encoder: sha3__namespace.sha3_256
});
const sha3384 = generic.GenericHasher.from({
  code: 21,
  name: "sha3-384",
  encoder: sha3__namespace.sha3_384
});
const sha3512 = generic.GenericHasher.from({
  code: 20,
  name: "sha3-512",
  encoder: sha3__namespace.sha3_512
});
const keccak224 = generic.GenericHasher.from({
  code: 26,
  name: "keccak-224",
  encoder: sha3__namespace.keccak_224
});
const keccak256 = generic.GenericHasher.from({
  code: 27,
  name: "keccak-256",
  encoder: sha3__namespace.keccak_256
});
const keccak384 = generic.GenericHasher.from({
  code: 28,
  name: "keccak-384",
  encoder: sha3__namespace.keccak_384
});
const keccak512 = generic.GenericHasher.from({
  code: 29,
  name: "keccak-512",
  encoder: sha3__namespace.keccak_512
});
const shake128 = generic.GenericHasher.from({
  code: 24,
  name: "shake-128",
  encoder: (data) => {
    return sha3__namespace.shake128(data, { dkLen: 32 });
  }
});
const shake256 = generic.GenericHasher.from({
  code: 25,
  name: "shake-256",
  encoder: (data) => {
    return sha3__namespace.shake256(data, { dkLen: 64 });
  }
});

exports.keccak224 = keccak224;
exports.keccak256 = keccak256;
exports.keccak384 = keccak384;
exports.keccak512 = keccak512;
exports.sha3224 = sha3224;
exports.sha3256 = sha3256;
exports.sha3384 = sha3384;
exports.sha3512 = sha3512;
exports.shake128 = shake128;
exports.shake256 = shake256;
