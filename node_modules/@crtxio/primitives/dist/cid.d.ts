import { Bytes, BytesLike } from './bytes.js';
import { TypedData } from 'eip-712';
import { MultihashHasherLike } from '@crtxio/hashers';

declare class Hash extends Bytes {
    readonly code: number;
    constructor(bytes: Uint8Array, code: number);
    get raw(): Bytes;
    to(encoding?: string, prefix?: boolean): string;
    static is(hash: HashLike): boolean;
    static from(hash: HashLike): Hash;
    static create(data: Hashable, hasher?: MultihashHasherLike): Promise<Hash>;
}
declare type Hashable = string | Uint8Array | TypedData;
declare type HashLike = Hash | BytesLike;

declare class CID extends Bytes {
    readonly hash: Hash;
    readonly code: number;
    readonly version: number;
    constructor(hash: Hash, code: number, version?: number);
    get raw(): Bytes;
    get v0(): CID;
    get v1(): CID;
    get alg(): string;
    get codec(): string;
    get humanize(): string;
    to(encoding?: string): string;
    static is(cid: CIDLike): boolean;
    static isV0(cid: CIDLike): boolean;
    static isV1(cid: CIDLike): boolean;
    static from(cid: CIDLike): CID;
    static create(hash: HashLike, codec: string | number, version?: number): CID;
}
declare type CIDLike = CID | BytesLike;

export { CID, CIDLike };
