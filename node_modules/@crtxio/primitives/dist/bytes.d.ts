declare class Bytes extends Uint8Array {
    protected _n: bigint;
    protected _bits: number;
    protected _maxIndex: number;
    constructor(bytes?: BytesLike, clamp?: number);
    bytesLikeThis(bytes: BytesLike): Bytes;
    get n(): bigint;
    get bytes(): Uint8Array;
    get copy(): Bytes;
    get isZero(): boolean;
    get isNull(): boolean;
    get isEmpty(): boolean;
    toString(encoding?: string, prefix?: boolean): string;
    toBin(compact?: boolean, bit?: number): string;
    on(index: number, le?: boolean): Bytes;
    off(index: number, le?: boolean): Bytes;
    flip(index: number, le?: boolean): Bytes;
    bit(index: number, le?: boolean): number;
    get lsb(): number;
    get msb(): number;
    get ones(): number;
    get zeros(): number;
    get not(): Bytes;
    iand(b: Bytes): Bytes;
    and(b: Bytes): Bytes;
    ior(b: Bytes): Bytes;
    or(b: Bytes): Bytes;
    ixor(b: Bytes): Bytes;
    xor(b: Bytes): Bytes;
    compare(b: Bytes): number;
    equals(b: Bytes): boolean;
    slice(start?: number, end?: number): Bytes;
    private _checkIndex;
    static from(bytes: BytesLike | Uint8ArrayLike): Bytes;
    static ensure(bytes: BytesLike, encoding?: string): Bytes;
    static get zero(): Bytes;
    static get null(): Bytes;
    static get empty(): Bytes;
}
declare type BytesLike = string | Bytes | Uint8ArrayLike;
declare type Uint8ArrayLike = Uint8Array | ArrayBuffer | Iterable<number> | ArrayLike<number>;

export { Bytes, BytesLike, Uint8ArrayLike };
